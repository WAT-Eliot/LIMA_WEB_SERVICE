/* soapC.cpp
   Generated by gSOAP 2.8.100 for client_collect.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.100 2020-04-08 07:57:04 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, tag, NULL, "xsd:short");
	case SOAP_TYPE_ns2__char:
		return soap_in_ns2__char(soap, tag, NULL, "ns2:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, tag, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, tag, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_in_ULONG64(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType:
		return soap_in_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, NULL, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType:
		return soap_in_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, NULL, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		return soap_in_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag, NULL, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		return soap_in_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag, NULL, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_ns2__guid__:
		return soap_in_ns2__guid__(soap, tag, NULL, "ns2:guid");
	case SOAP_TYPE_ns2__guid:
		return soap_in_ns2__guid(soap, tag, NULL, "ns2:guid");
	case SOAP_TYPE_ns2__duration__:
		return soap_in_ns2__duration__(soap, tag, NULL, "ns2:duration");
	case SOAP_TYPE_ns2__duration:
		return soap_in_ns2__duration(soap, tag, NULL, "ns2:duration");
	case SOAP_TYPE_ns2__char__:
		return soap_in_ns2__char__(soap, tag, NULL, "ns2:char");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		return soap_in_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleReportRunningModeRequest");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		return soap_in_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleMissionStatusRequest");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		return soap_in_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest");
	case SOAP_TYPE_xsd__unsignedShort_:
		return soap_in_xsd__unsignedShort_(soap, tag, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong_:
		return soap_in_xsd__unsignedLong_(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt_:
		return soap_in_xsd__unsignedInt_(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte__:
		return soap_in_xsd__unsignedByte__(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string_:
		return soap_in_xsd__string_(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short_:
		return soap_in_xsd__short_(soap, tag, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long_:
		return soap_in_xsd__long_(soap, tag, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int_:
		return soap_in_xsd__int_(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float_:
		return soap_in_xsd__float_(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration__:
		return soap_in_xsd__duration__(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double_:
		return soap_in_xsd__double_(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal__:
		return soap_in_xsd__decimal__(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime_:
		return soap_in_xsd__dateTime_(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte__:
		return soap_in_xsd__byte__(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean_:
		return soap_in_xsd__boolean_(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary__:
		return soap_in_xsd__base64Binary__(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI__:
		return soap_in_xsd__anyURI__(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName__:
		return soap_in_xsd__QName__(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF__:
		return soap_in_xsd__IDREF__(soap, tag, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, tag, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID__:
		return soap_in_xsd__ID__(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, tag, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__ReportRunningMode:
		return soap_in_PointerTo_ns1__ReportRunningMode(soap, tag, NULL, "ns1:ReportRunningMode");
	case SOAP_TYPE_PointerTo_ns1__MissionStatus:
		return soap_in_PointerTo_ns1__MissionStatus(soap, tag, NULL, "ns1:MissionStatus");
	case SOAP_TYPE_PointerTo_ns1__TapingOutputConveyorNumber:
		return soap_in_PointerTo_ns1__TapingOutputConveyorNumber(soap, tag, NULL, "ns1:TapingOutputConveyorNumber");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleRunningModeType:
		return soap_in_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, tag, NULL, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusType:
		return soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, tag, NULL, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest:
		return soap_in_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleReportRunningModeRequest");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusRequest:
		return soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleMissionStatusRequest");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		return soap_in_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, NULL, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleRunningModeType"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_;
			return soap_in_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleMissionStatusType"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_;
			return soap_in_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:guid"))
		{	*type = SOAP_TYPE_ns2__guid__;
			return soap_in_ns2__guid__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:guid"))
		{	*type = SOAP_TYPE_ns2__guid;
			return soap_in_ns2__guid(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:duration"))
		{	*type = SOAP_TYPE_ns2__duration__;
			return soap_in_ns2__duration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:duration"))
		{	*type = SOAP_TYPE_ns2__duration;
			return soap_in_ns2__duration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:char"))
		{	*type = SOAP_TYPE_ns2__char__;
			return soap_in_ns2__char__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleReportRunningModeRequest"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest;
			return soap_in_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleMissionStatusRequest"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest;
			return soap_in_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest;
			return soap_in_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort_;
			return soap_in_xsd__unsignedShort_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong_;
			return soap_in_xsd__unsignedLong_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt_;
			return soap_in_xsd__unsignedInt_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte__;
			return soap_in_xsd__unsignedByte__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string_;
			return soap_in_xsd__string_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short_;
			return soap_in_xsd__short_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long_;
			return soap_in_xsd__long_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int_;
			return soap_in_xsd__int_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float_;
			return soap_in_xsd__float_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration__;
			return soap_in_xsd__duration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double_;
			return soap_in_xsd__double_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal__;
			return soap_in_xsd__decimal__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime_;
			return soap_in_xsd__dateTime_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte__;
			return soap_in_xsd__byte__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean_;
			return soap_in_xsd__boolean_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary__;
			return soap_in_xsd__base64Binary__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI__;
			return soap_in_xsd__anyURI__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName__;
			return soap_in_xsd__QName__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF__;
			return soap_in_xsd__IDREF__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID__;
			return soap_in_xsd__ID__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:char"))
		{	*type = SOAP_TYPE_ns2__char;
			return soap_in_ns2__char(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_ULONG64;
			return soap_in_ULONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleRunningModeType"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType;
			return soap_in_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:PostTapingCollectShuttleMissionStatusType"))
		{	*type = SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType;
			return soap_in_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ReportRunningModeResponse"))
		{	*type = SOAP_TYPE__ns1__ReportRunningModeResponse;
			return soap_in__ns1__ReportRunningModeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportRunningMode"))
		{	*type = SOAP_TYPE__ns1__ReportRunningMode;
			return soap_in__ns1__ReportRunningMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MissionStatusResponse"))
		{	*type = SOAP_TYPE__ns1__MissionStatusResponse;
			return soap_in__ns1__MissionStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MissionStatus"))
		{	*type = SOAP_TYPE__ns1__MissionStatus;
			return soap_in__ns1__MissionStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TapingOutputConveyorNumberResponse"))
		{	*type = SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse;
			return soap_in__ns1__TapingOutputConveyorNumberResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TapingOutputConveyorNumber"))
		{	*type = SOAP_TYPE__ns1__TapingOutputConveyorNumber;
			return soap_in__ns1__TapingOutputConveyorNumber(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns2__char:
		return soap_out_ns2__char(soap, tag, id, (const int *)ptr, "ns2:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_out_ULONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType:
		return soap_out_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, id, (const enum ns3__PostTapingCollectShuttleRunningModeType *)ptr, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType:
		return soap_out_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, id, (const enum ns3__PostTapingCollectShuttleMissionStatusType *)ptr, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		return ((ns3__PostTapingCollectShuttleRunningModeType_ *)ptr)->soap_out(soap, tag, id, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		return ((ns3__PostTapingCollectShuttleMissionStatusType_ *)ptr)->soap_out(soap, tag, id, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_ns2__guid__:
		return ((ns2__guid__ *)ptr)->soap_out(soap, tag, id, "ns2:guid");
	case SOAP_TYPE_ns2__guid:
		return soap_out_ns2__guid(soap, tag, id, (const std::string *)ptr, "ns2:guid");
	case SOAP_TYPE_ns2__duration__:
		return ((ns2__duration__ *)ptr)->soap_out(soap, tag, id, "ns2:duration");
	case SOAP_TYPE_ns2__duration:
		return soap_out_ns2__duration(soap, tag, id, (const std::string *)ptr, "ns2:duration");
	case SOAP_TYPE_ns2__char__:
		return ((ns2__char__ *)ptr)->soap_out(soap, tag, id, "ns2:char");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		return ((ns3__PostTapingCollectShuttleReportRunningModeRequest *)ptr)->soap_out(soap, tag, id, "ns3:PostTapingCollectShuttleReportRunningModeRequest");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		return ((ns3__PostTapingCollectShuttleMissionStatusRequest *)ptr)->soap_out(soap, tag, id, "ns3:PostTapingCollectShuttleMissionStatusRequest");
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		return ((ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *)ptr)->soap_out(soap, tag, id, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest");
	case SOAP_TYPE__ns1__ReportRunningModeResponse:
		return ((_ns1__ReportRunningModeResponse *)ptr)->soap_out(soap, "ns1:ReportRunningModeResponse", id, "");
	case SOAP_TYPE__ns1__ReportRunningMode:
		return ((_ns1__ReportRunningMode *)ptr)->soap_out(soap, "ns1:ReportRunningMode", id, "");
	case SOAP_TYPE__ns1__MissionStatusResponse:
		return ((_ns1__MissionStatusResponse *)ptr)->soap_out(soap, "ns1:MissionStatusResponse", id, "");
	case SOAP_TYPE__ns1__MissionStatus:
		return ((_ns1__MissionStatus *)ptr)->soap_out(soap, "ns1:MissionStatus", id, "");
	case SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse:
		return ((_ns1__TapingOutputConveyorNumberResponse *)ptr)->soap_out(soap, "ns1:TapingOutputConveyorNumberResponse", id, "");
	case SOAP_TYPE__ns1__TapingOutputConveyorNumber:
		return ((_ns1__TapingOutputConveyorNumber *)ptr)->soap_out(soap, "ns1:TapingOutputConveyorNumber", id, "");
	case SOAP_TYPE_xsd__unsignedShort_:
		return ((xsd__unsignedShort_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong_:
		return ((xsd__unsignedLong_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt_:
		return ((xsd__unsignedInt_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte__:
		return ((xsd__unsignedByte__ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string_:
		return ((xsd__string_ *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short_:
		return ((xsd__short_ *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long_:
		return ((xsd__long_ *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int_:
		return ((xsd__int_ *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float_:
		return ((xsd__float_ *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration__:
		return ((xsd__duration__ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__double_:
		return ((xsd__double_ *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal__:
		return ((xsd__decimal__ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime_:
		return ((xsd__dateTime_ *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte__:
		return ((xsd__byte__ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean_:
		return ((xsd__boolean_ *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary__:
		return ((xsd__base64Binary__ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI__:
		return ((xsd__anyURI__ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName__:
		return ((xsd__QName__ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF__:
		return ((xsd__IDREF__ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID__:
		return ((xsd__ID__ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__ReportRunningMode:
		return soap_out_PointerTo_ns1__ReportRunningMode(soap, tag, id, (_ns1__ReportRunningMode *const*)ptr, "ns1:ReportRunningMode");
	case SOAP_TYPE_PointerTo_ns1__MissionStatus:
		return soap_out_PointerTo_ns1__MissionStatus(soap, tag, id, (_ns1__MissionStatus *const*)ptr, "ns1:MissionStatus");
	case SOAP_TYPE_PointerTo_ns1__TapingOutputConveyorNumber:
		return soap_out_PointerTo_ns1__TapingOutputConveyorNumber(soap, tag, id, (_ns1__TapingOutputConveyorNumber *const*)ptr, "ns1:TapingOutputConveyorNumber");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleRunningModeType:
		return soap_out_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, tag, id, (enum ns3__PostTapingCollectShuttleRunningModeType *const*)ptr, "ns3:PostTapingCollectShuttleRunningModeType");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusType:
		return soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, tag, id, (enum ns3__PostTapingCollectShuttleMissionStatusType *const*)ptr, "ns3:PostTapingCollectShuttleMissionStatusType");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest:
		return soap_out_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, id, (ns3__PostTapingCollectShuttleReportRunningModeRequest *const*)ptr, "ns3:PostTapingCollectShuttleReportRunningModeRequest");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusRequest:
		return soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, id, (ns3__PostTapingCollectShuttleMissionStatusRequest *const*)ptr, "ns3:PostTapingCollectShuttleMissionStatusRequest");
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		return soap_out_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, id, (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *const*)ptr, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		((ns3__PostTapingCollectShuttleRunningModeType_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		((ns3__PostTapingCollectShuttleMissionStatusType_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__guid__:
		((ns2__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__guid:
		soap_serialize_ns2__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__duration__:
		((ns2__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__duration:
		soap_serialize_ns2__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__char__:
		((ns2__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		((ns3__PostTapingCollectShuttleReportRunningModeRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		((ns3__PostTapingCollectShuttleMissionStatusRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		((ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportRunningModeResponse:
		((_ns1__ReportRunningModeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReportRunningMode:
		((_ns1__ReportRunningMode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MissionStatusResponse:
		((_ns1__MissionStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MissionStatus:
		((_ns1__MissionStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse:
		((_ns1__TapingOutputConveyorNumberResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumber:
		((_ns1__TapingOutputConveyorNumber *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort_:
		((xsd__unsignedShort_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong_:
		((xsd__unsignedLong_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		((xsd__unsignedInt_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte__:
		((xsd__unsignedByte__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string_:
		((xsd__string_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short_:
		((xsd__short_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long_:
		((xsd__long_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int_:
		((xsd__int_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float_:
		((xsd__float_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration__:
		((xsd__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__double_:
		((xsd__double_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal__:
		((xsd__decimal__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime_:
		((xsd__dateTime_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte__:
		((xsd__byte__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean_:
		((xsd__boolean_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		((xsd__base64Binary__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI__:
		((xsd__anyURI__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName__:
		((xsd__QName__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF__:
		((xsd__IDREF__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__ID__:
		((xsd__ID__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__ReportRunningMode:
		soap_serialize___ns1__ReportRunningMode(soap, (const struct __ns1__ReportRunningMode *)ptr);
		break;
	case SOAP_TYPE___ns1__MissionStatus:
		soap_serialize___ns1__MissionStatus(soap, (const struct __ns1__MissionStatus *)ptr);
		break;
	case SOAP_TYPE___ns1__TapingOutputConveyorNumber:
		soap_serialize___ns1__TapingOutputConveyorNumber(soap, (const struct __ns1__TapingOutputConveyorNumber *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReportRunningMode:
		soap_serialize_PointerTo_ns1__ReportRunningMode(soap, (_ns1__ReportRunningMode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MissionStatus:
		soap_serialize_PointerTo_ns1__MissionStatus(soap, (_ns1__MissionStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__TapingOutputConveyorNumber:
		soap_serialize_PointerTo_ns1__TapingOutputConveyorNumber(soap, (_ns1__TapingOutputConveyorNumber *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleRunningModeType:
		soap_serialize_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, (enum ns3__PostTapingCollectShuttleRunningModeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusType:
		soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, (enum ns3__PostTapingCollectShuttleMissionStatusType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest:
		soap_serialize_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, (ns3__PostTapingCollectShuttleReportRunningModeRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleMissionStatusRequest:
		soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, (ns3__PostTapingCollectShuttleMissionStatusRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		soap_serialize_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID__:
		return (void*)soap_instantiate_xsd__ID__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF__:
		return (void*)soap_instantiate_xsd__IDREF__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName__:
		return (void*)soap_instantiate_xsd__QName__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI__:
		return (void*)soap_instantiate_xsd__anyURI__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary__:
		return (void*)soap_instantiate_xsd__base64Binary__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean_:
		return (void*)soap_instantiate_xsd__boolean_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte__:
		return (void*)soap_instantiate_xsd__byte__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime_:
		return (void*)soap_instantiate_xsd__dateTime_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal__:
		return (void*)soap_instantiate_xsd__decimal__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double_:
		return (void*)soap_instantiate_xsd__double_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration__:
		return (void*)soap_instantiate_xsd__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float_:
		return (void*)soap_instantiate_xsd__float_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int_:
		return (void*)soap_instantiate_xsd__int_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long_:
		return (void*)soap_instantiate_xsd__long_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short_:
		return (void*)soap_instantiate_xsd__short_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string_:
		return (void*)soap_instantiate_xsd__string_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte__:
		return (void*)soap_instantiate_xsd__unsignedByte__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt_:
		return (void*)soap_instantiate_xsd__unsignedInt_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong_:
		return (void*)soap_instantiate_xsd__unsignedLong_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort_:
		return (void*)soap_instantiate_xsd__unsignedShort_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__char__:
		return (void*)soap_instantiate_ns2__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__duration__:
		return (void*)soap_instantiate_ns2__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__guid__:
		return (void*)soap_instantiate_ns2__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		return (void*)soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusType_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		return (void*)soap_instantiate_ns3__PostTapingCollectShuttleRunningModeType_(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__TapingOutputConveyorNumber:
		return (void*)soap_instantiate__ns1__TapingOutputConveyorNumber(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse:
		return (void*)soap_instantiate__ns1__TapingOutputConveyorNumberResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MissionStatus:
		return (void*)soap_instantiate__ns1__MissionStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MissionStatusResponse:
		return (void*)soap_instantiate__ns1__MissionStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportRunningMode:
		return (void*)soap_instantiate__ns1__ReportRunningMode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReportRunningModeResponse:
		return (void*)soap_instantiate__ns1__ReportRunningModeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		return (void*)soap_instantiate_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		return (void*)soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		return (void*)soap_instantiate_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__TapingOutputConveyorNumber:
		return (void*)soap_instantiate___ns1__TapingOutputConveyorNumber(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MissionStatus:
		return (void*)soap_instantiate___ns1__MissionStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReportRunningMode:
		return (void*)soap_instantiate___ns1__ReportRunningMode(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__duration:
		return (void*)soap_instantiate_ns2__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__guid:
		return (void*)soap_instantiate_ns2__guid(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_xsd__ID__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		break;
	case SOAP_TYPE_xsd__IDREF__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__IDREF__*>(p->ptr), xsd__IDREF__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__IDREF__*>(p->ptr), xsd__IDREF__);
		break;
	case SOAP_TYPE_xsd__QName__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		break;
	case SOAP_TYPE_xsd__anyURI__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		break;
	case SOAP_TYPE_xsd__boolean_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		break;
	case SOAP_TYPE_xsd__byte__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__byte__*>(p->ptr), xsd__byte__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__byte__*>(p->ptr), xsd__byte__);
		break;
	case SOAP_TYPE_xsd__dateTime_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__dateTime_*>(p->ptr), xsd__dateTime_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__dateTime_*>(p->ptr), xsd__dateTime_);
		break;
	case SOAP_TYPE_xsd__decimal__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__decimal__*>(p->ptr), xsd__decimal__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__decimal__*>(p->ptr), xsd__decimal__);
		break;
	case SOAP_TYPE_xsd__double_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		break;
	case SOAP_TYPE_xsd__duration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		break;
	case SOAP_TYPE_xsd__float_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		break;
	case SOAP_TYPE_xsd__int_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		break;
	case SOAP_TYPE_xsd__long_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__long_*>(p->ptr), xsd__long_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__long_*>(p->ptr), xsd__long_);
		break;
	case SOAP_TYPE_xsd__short_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__short_*>(p->ptr), xsd__short_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__short_*>(p->ptr), xsd__short_);
		break;
	case SOAP_TYPE_xsd__string_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		break;
	case SOAP_TYPE_xsd__unsignedByte__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedByte__*>(p->ptr), xsd__unsignedByte__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedByte__*>(p->ptr), xsd__unsignedByte__);
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		break;
	case SOAP_TYPE_xsd__unsignedLong_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedLong_*>(p->ptr), xsd__unsignedLong_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedLong_*>(p->ptr), xsd__unsignedLong_);
		break;
	case SOAP_TYPE_xsd__unsignedShort_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedShort_*>(p->ptr), xsd__unsignedShort_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedShort_*>(p->ptr), xsd__unsignedShort_);
		break;
	case SOAP_TYPE_ns2__char__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__char__*>(p->ptr), ns2__char__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__char__*>(p->ptr), ns2__char__);
		break;
	case SOAP_TYPE_ns2__duration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__duration__*>(p->ptr), ns2__duration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__duration__*>(p->ptr), ns2__duration__);
		break;
	case SOAP_TYPE_ns2__guid__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__guid__*>(p->ptr), ns2__guid__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__guid__*>(p->ptr), ns2__guid__);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__PostTapingCollectShuttleMissionStatusType_*>(p->ptr), ns3__PostTapingCollectShuttleMissionStatusType_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__PostTapingCollectShuttleMissionStatusType_*>(p->ptr), ns3__PostTapingCollectShuttleMissionStatusType_);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__PostTapingCollectShuttleRunningModeType_*>(p->ptr), ns3__PostTapingCollectShuttleRunningModeType_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__PostTapingCollectShuttleRunningModeType_*>(p->ptr), ns3__PostTapingCollectShuttleRunningModeType_);
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumber:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__TapingOutputConveyorNumber*>(p->ptr), _ns1__TapingOutputConveyorNumber);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__TapingOutputConveyorNumber*>(p->ptr), _ns1__TapingOutputConveyorNumber);
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__TapingOutputConveyorNumberResponse*>(p->ptr), _ns1__TapingOutputConveyorNumberResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__TapingOutputConveyorNumberResponse*>(p->ptr), _ns1__TapingOutputConveyorNumberResponse);
		break;
	case SOAP_TYPE__ns1__MissionStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MissionStatus*>(p->ptr), _ns1__MissionStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MissionStatus*>(p->ptr), _ns1__MissionStatus);
		break;
	case SOAP_TYPE__ns1__MissionStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MissionStatusResponse*>(p->ptr), _ns1__MissionStatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MissionStatusResponse*>(p->ptr), _ns1__MissionStatusResponse);
		break;
	case SOAP_TYPE__ns1__ReportRunningMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ReportRunningMode*>(p->ptr), _ns1__ReportRunningMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ReportRunningMode*>(p->ptr), _ns1__ReportRunningMode);
		break;
	case SOAP_TYPE__ns1__ReportRunningModeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ReportRunningModeResponse*>(p->ptr), _ns1__ReportRunningModeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ReportRunningModeResponse*>(p->ptr), _ns1__ReportRunningModeResponse);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__PostTapingCollectShuttleTapingOutputConveyorRequest*>(p->ptr), ns3__PostTapingCollectShuttleTapingOutputConveyorRequest);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__PostTapingCollectShuttleTapingOutputConveyorRequest*>(p->ptr), ns3__PostTapingCollectShuttleTapingOutputConveyorRequest);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__PostTapingCollectShuttleMissionStatusRequest*>(p->ptr), ns3__PostTapingCollectShuttleMissionStatusRequest);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__PostTapingCollectShuttleMissionStatusRequest*>(p->ptr), ns3__PostTapingCollectShuttleMissionStatusRequest);
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__PostTapingCollectShuttleReportRunningModeRequest*>(p->ptr), ns3__PostTapingCollectShuttleReportRunningModeRequest);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__PostTapingCollectShuttleReportRunningModeRequest*>(p->ptr), ns3__PostTapingCollectShuttleReportRunningModeRequest);
		break;
	case SOAP_TYPE___ns1__TapingOutputConveyorNumber:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__TapingOutputConveyorNumber*>(p->ptr), struct __ns1__TapingOutputConveyorNumber);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__TapingOutputConveyorNumber*>(p->ptr), struct __ns1__TapingOutputConveyorNumber);
		break;
	case SOAP_TYPE___ns1__MissionStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__MissionStatus*>(p->ptr), struct __ns1__MissionStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__MissionStatus*>(p->ptr), struct __ns1__MissionStatus);
		break;
	case SOAP_TYPE___ns1__ReportRunningMode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ReportRunningMode*>(p->ptr), struct __ns1__ReportRunningMode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ReportRunningMode*>(p->ptr), struct __ns1__ReportRunningMode);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns2__duration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns2__guid:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_xsd__ID__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__IDREF__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__QName__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__anyURI__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__base64Binary__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__boolean_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__byte__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__dateTime_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__decimal__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__double_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__duration__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__float_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__int_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__long_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__short_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__string_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedByte__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedInt_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedLong_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedShort_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns2__char__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns2__duration__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns2__guid__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest: t = SOAP_TYPE_xsd__anyType; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyType type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyType*)p = *(xsd__anyType*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_xsd__ID__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__ID__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__ID__*)p = *(xsd__ID__*)q;
		break;
	case SOAP_TYPE_xsd__IDREF__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__IDREF__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__IDREF__*)p = *(xsd__IDREF__*)q;
		break;
	case SOAP_TYPE_xsd__QName__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__QName__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__QName__*)p = *(xsd__QName__*)q;
		break;
	case SOAP_TYPE_xsd__anyURI__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyURI__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyURI__*)p = *(xsd__anyURI__*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary__*)p = *(xsd__base64Binary__*)q;
		break;
	case SOAP_TYPE_xsd__boolean_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__boolean_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__boolean_*)p = *(xsd__boolean_*)q;
		break;
	case SOAP_TYPE_xsd__byte__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__byte__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__byte__*)p = *(xsd__byte__*)q;
		break;
	case SOAP_TYPE_xsd__dateTime_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__dateTime_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__dateTime_*)p = *(xsd__dateTime_*)q;
		break;
	case SOAP_TYPE_xsd__decimal__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__decimal__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__decimal__*)p = *(xsd__decimal__*)q;
		break;
	case SOAP_TYPE_xsd__double_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__double_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__double_*)p = *(xsd__double_*)q;
		break;
	case SOAP_TYPE_xsd__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__duration__*)p = *(xsd__duration__*)q;
		break;
	case SOAP_TYPE_xsd__float_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__float_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__float_*)p = *(xsd__float_*)q;
		break;
	case SOAP_TYPE_xsd__int_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__int_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__int_*)p = *(xsd__int_*)q;
		break;
	case SOAP_TYPE_xsd__long_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__long_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__long_*)p = *(xsd__long_*)q;
		break;
	case SOAP_TYPE_xsd__short_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__short_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__short_*)p = *(xsd__short_*)q;
		break;
	case SOAP_TYPE_xsd__string_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__string_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__string_*)p = *(xsd__string_*)q;
		break;
	case SOAP_TYPE_xsd__unsignedByte__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedByte__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedByte__*)p = *(xsd__unsignedByte__*)q;
		break;
	case SOAP_TYPE_xsd__unsignedInt_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedInt_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedInt_*)p = *(xsd__unsignedInt_*)q;
		break;
	case SOAP_TYPE_xsd__unsignedLong_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedLong_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedLong_*)p = *(xsd__unsignedLong_*)q;
		break;
	case SOAP_TYPE_xsd__unsignedShort_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedShort_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedShort_*)p = *(xsd__unsignedShort_*)q;
		break;
	case SOAP_TYPE_ns2__char__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__char__ type=%d location=%p object=%p\n", t, p, q));
		*(ns2__char__*)p = *(ns2__char__*)q;
		break;
	case SOAP_TYPE_ns2__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(ns2__duration__*)p = *(ns2__duration__*)q;
		break;
	case SOAP_TYPE_ns2__guid__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__guid__ type=%d location=%p object=%p\n", t, p, q));
		*(ns2__guid__*)p = *(ns2__guid__*)q;
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__PostTapingCollectShuttleMissionStatusType_ type=%d location=%p object=%p\n", t, p, q));
		*(ns3__PostTapingCollectShuttleMissionStatusType_*)p = *(ns3__PostTapingCollectShuttleMissionStatusType_*)q;
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__PostTapingCollectShuttleRunningModeType_ type=%d location=%p object=%p\n", t, p, q));
		*(ns3__PostTapingCollectShuttleRunningModeType_*)p = *(ns3__PostTapingCollectShuttleRunningModeType_*)q;
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumber:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__TapingOutputConveyorNumber type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__TapingOutputConveyorNumber*)p = *(_ns1__TapingOutputConveyorNumber*)q;
		break;
	case SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__TapingOutputConveyorNumberResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__TapingOutputConveyorNumberResponse*)p = *(_ns1__TapingOutputConveyorNumberResponse*)q;
		break;
	case SOAP_TYPE__ns1__MissionStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MissionStatus type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MissionStatus*)p = *(_ns1__MissionStatus*)q;
		break;
	case SOAP_TYPE__ns1__MissionStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MissionStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MissionStatusResponse*)p = *(_ns1__MissionStatusResponse*)q;
		break;
	case SOAP_TYPE__ns1__ReportRunningMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ReportRunningMode type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ReportRunningMode*)p = *(_ns1__ReportRunningMode*)q;
		break;
	case SOAP_TYPE__ns1__ReportRunningModeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ReportRunningModeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ReportRunningModeResponse*)p = *(_ns1__ReportRunningModeResponse*)q;
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__PostTapingCollectShuttleTapingOutputConveyorRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest*)p = *(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest*)q;
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__PostTapingCollectShuttleMissionStatusRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__PostTapingCollectShuttleMissionStatusRequest*)p = *(ns3__PostTapingCollectShuttleMissionStatusRequest*)q;
		break;
	case SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__PostTapingCollectShuttleReportRunningModeRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__PostTapingCollectShuttleReportRunningModeRequest*)p = *(ns3__PostTapingCollectShuttleReportRunningModeRequest*)q;
		break;
	case SOAP_TYPE___ns1__TapingOutputConveyorNumber:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__TapingOutputConveyorNumber type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__TapingOutputConveyorNumber*)p = *(struct __ns1__TapingOutputConveyorNumber*)q;
		break;
	case SOAP_TYPE___ns1__MissionStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__MissionStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__MissionStatus*)p = *(struct __ns1__MissionStatus*)q;
		break;
	case SOAP_TYPE___ns1__ReportRunningMode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ReportRunningMode type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ReportRunningMode*)p = *(struct __ns1__ReportRunningMode*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__QName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__ID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__IDREF:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns2__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns2__guid:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__byte(soap, tag ? tag : "xsd:byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return a;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n)
{
	short *a = static_cast<short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(short)));
	for (short *p = a; p && n--; ++p)
		soap_default_short(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_short(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns2__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns2__char(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ns2__char);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ns2__char(soap, tag ? tag : "ns2:char", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns2__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return a;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n)
{
	float *a = static_cast<float *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(float)));
	for (float *p = a; p && n--; ++p)
		soap_default_float(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__unsignedByte(soap, tag ? tag : "xsd:unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{
	a = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return a;
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n)
{
	unsigned short *a = static_cast<unsigned short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned short)));
	for (unsigned short *p = a; p && n--; ++p)
		soap_default_unsignedShort(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	if (soap_out_unsignedShort(soap, tag ? tag : "unsignedShort", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_ULONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	a = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_ULONG64);
	return a;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n)
{
	ULONG64 *a = static_cast<ULONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(ULONG64)));
	for (ULONG64 *p = a; p && n--; ++p)
		soap_default_ULONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out_ULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns3__PostTapingCollectShuttleRunningModeType[] =
{	{ (LONG64)ns3__PostTapingCollectShuttleRunningModeType__Manual, "Manual" },
	{ (LONG64)ns3__PostTapingCollectShuttleRunningModeType__Rest, "Rest" },
	{ (LONG64)ns3__PostTapingCollectShuttleRunningModeType__MissionInProgress, "MissionInProgress" },
	{ (LONG64)ns3__PostTapingCollectShuttleRunningModeType__Default, "Default" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PostTapingCollectShuttleRunningModeType2s(struct soap *soap, enum ns3__PostTapingCollectShuttleRunningModeType n)
{
	const char *s = soap_code_str(soap_codes_ns3__PostTapingCollectShuttleRunningModeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const char *tag, int id, const enum ns3__PostTapingCollectShuttleRunningModeType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType), type) || soap_send(soap, soap_ns3__PostTapingCollectShuttleRunningModeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const char *s, enum ns3__PostTapingCollectShuttleRunningModeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns3__PostTapingCollectShuttleRunningModeType, s);
	if (map)
		*a = (enum ns3__PostTapingCollectShuttleRunningModeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (enum ns3__PostTapingCollectShuttleRunningModeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleRunningModeType * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const char *tag, enum ns3__PostTapingCollectShuttleRunningModeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns3__PostTapingCollectShuttleRunningModeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType, sizeof(enum ns3__PostTapingCollectShuttleRunningModeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns3__PostTapingCollectShuttleRunningModeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns3__PostTapingCollectShuttleRunningModeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType, sizeof(enum ns3__PostTapingCollectShuttleRunningModeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleRunningModeType * SOAP_FMAC4 soap_new_ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, int n)
{
	enum ns3__PostTapingCollectShuttleRunningModeType *a = static_cast<enum ns3__PostTapingCollectShuttleRunningModeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns3__PostTapingCollectShuttleRunningModeType)));
	for (enum ns3__PostTapingCollectShuttleRunningModeType *p = a; p && n--; ++p)
		soap_default_ns3__PostTapingCollectShuttleRunningModeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const enum ns3__PostTapingCollectShuttleRunningModeType *a, const char *tag, const char *type)
{
	if (soap_out_ns3__PostTapingCollectShuttleRunningModeType(soap, tag ? tag : "ns3:PostTapingCollectShuttleRunningModeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleRunningModeType * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleRunningModeType(struct soap *soap, enum ns3__PostTapingCollectShuttleRunningModeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns3__PostTapingCollectShuttleMissionStatusType[] =
{	{ (LONG64)ns3__PostTapingCollectShuttleMissionStatusType__Ok, "Ok" },
	{ (LONG64)ns3__PostTapingCollectShuttleMissionStatusType__Nok, "Nok" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PostTapingCollectShuttleMissionStatusType2s(struct soap *soap, enum ns3__PostTapingCollectShuttleMissionStatusType n)
{
	const char *s = soap_code_str(soap_codes_ns3__PostTapingCollectShuttleMissionStatusType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const char *tag, int id, const enum ns3__PostTapingCollectShuttleMissionStatusType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType), type) || soap_send(soap, soap_ns3__PostTapingCollectShuttleMissionStatusType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const char *s, enum ns3__PostTapingCollectShuttleMissionStatusType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns3__PostTapingCollectShuttleMissionStatusType, s);
	if (map)
		*a = (enum ns3__PostTapingCollectShuttleMissionStatusType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (enum ns3__PostTapingCollectShuttleMissionStatusType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleMissionStatusType * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const char *tag, enum ns3__PostTapingCollectShuttleMissionStatusType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns3__PostTapingCollectShuttleMissionStatusType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType, sizeof(enum ns3__PostTapingCollectShuttleMissionStatusType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns3__PostTapingCollectShuttleMissionStatusType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns3__PostTapingCollectShuttleMissionStatusType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType, sizeof(enum ns3__PostTapingCollectShuttleMissionStatusType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleMissionStatusType * SOAP_FMAC4 soap_new_ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, int n)
{
	enum ns3__PostTapingCollectShuttleMissionStatusType *a = static_cast<enum ns3__PostTapingCollectShuttleMissionStatusType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns3__PostTapingCollectShuttleMissionStatusType)));
	for (enum ns3__PostTapingCollectShuttleMissionStatusType *p = a; p && n--; ++p)
		soap_default_ns3__PostTapingCollectShuttleMissionStatusType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const enum ns3__PostTapingCollectShuttleMissionStatusType *a, const char *tag, const char *type)
{
	if (soap_out_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag ? tag : "ns3:PostTapingCollectShuttleMissionStatusType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleMissionStatusType * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, enum ns3__PostTapingCollectShuttleMissionStatusType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__PostTapingCollectShuttleRunningModeType_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__PostTapingCollectShuttleRunningModeType(soap, &this->ns3__PostTapingCollectShuttleRunningModeType_::__item);
}

void ns3__PostTapingCollectShuttleRunningModeType_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns3__PostTapingCollectShuttleRunningModeType_::__item, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__PostTapingCollectShuttleRunningModeType_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleRunningModeType_(struct soap *soap, const char *tag, int id, const ns3__PostTapingCollectShuttleRunningModeType_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, id, &a->ns3__PostTapingCollectShuttleRunningModeType_::__item, "ns3:PostTapingCollectShuttleRunningModeType");
}

void *ns3__PostTapingCollectShuttleRunningModeType_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag, this, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleRunningModeType_ * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleRunningModeType_(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleRunningModeType_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__PostTapingCollectShuttleRunningModeType_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_, sizeof(ns3__PostTapingCollectShuttleRunningModeType_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_)
		return (ns3__PostTapingCollectShuttleRunningModeType_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, &a->ns3__PostTapingCollectShuttleRunningModeType_::__item, "ns3:PostTapingCollectShuttleRunningModeType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns3__PostTapingCollectShuttleRunningModeType_ * SOAP_FMAC2 soap_instantiate_ns3__PostTapingCollectShuttleRunningModeType_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__PostTapingCollectShuttleRunningModeType_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__PostTapingCollectShuttleRunningModeType_ *p;
	size_t k = sizeof(ns3__PostTapingCollectShuttleRunningModeType_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__PostTapingCollectShuttleRunningModeType_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__PostTapingCollectShuttleRunningModeType_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__PostTapingCollectShuttleRunningModeType_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__PostTapingCollectShuttleRunningModeType_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag ? tag : "ns3:PostTapingCollectShuttleRunningModeType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__PostTapingCollectShuttleRunningModeType_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__PostTapingCollectShuttleRunningModeType_(soap, this, tag, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleRunningModeType_ * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleRunningModeType_(struct soap *soap, ns3__PostTapingCollectShuttleRunningModeType_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleRunningModeType_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__PostTapingCollectShuttleMissionStatusType_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__PostTapingCollectShuttleMissionStatusType(soap, &this->ns3__PostTapingCollectShuttleMissionStatusType_::__item);
}

void ns3__PostTapingCollectShuttleMissionStatusType_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns3__PostTapingCollectShuttleMissionStatusType_::__item, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__PostTapingCollectShuttleMissionStatusType_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleMissionStatusType_(struct soap *soap, const char *tag, int id, const ns3__PostTapingCollectShuttleMissionStatusType_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, id, &a->ns3__PostTapingCollectShuttleMissionStatusType_::__item, "ns3:PostTapingCollectShuttleMissionStatusType");
}

void *ns3__PostTapingCollectShuttleMissionStatusType_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag, this, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusType_ * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleMissionStatusType_(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleMissionStatusType_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__PostTapingCollectShuttleMissionStatusType_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_, sizeof(ns3__PostTapingCollectShuttleMissionStatusType_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_)
		return (ns3__PostTapingCollectShuttleMissionStatusType_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, &a->ns3__PostTapingCollectShuttleMissionStatusType_::__item, "ns3:PostTapingCollectShuttleMissionStatusType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns3__PostTapingCollectShuttleMissionStatusType_ * SOAP_FMAC2 soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusType_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusType_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__PostTapingCollectShuttleMissionStatusType_ *p;
	size_t k = sizeof(ns3__PostTapingCollectShuttleMissionStatusType_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__PostTapingCollectShuttleMissionStatusType_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__PostTapingCollectShuttleMissionStatusType_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__PostTapingCollectShuttleMissionStatusType_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__PostTapingCollectShuttleMissionStatusType_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag ? tag : "ns3:PostTapingCollectShuttleMissionStatusType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__PostTapingCollectShuttleMissionStatusType_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__PostTapingCollectShuttleMissionStatusType_(soap, this, tag, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusType_ * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleMissionStatusType_(struct soap *soap, ns3__PostTapingCollectShuttleMissionStatusType_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleMissionStatusType_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns2__guid(soap, &this->ns2__guid__::__item);
}

void ns2__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns2__guid(soap, &this->ns2__guid__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns2__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__guid__(struct soap *soap, const char *tag, int id, const ns2__guid__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns2__guid(soap, tag, id, &a->ns2__guid__::__item, "ns2:guid");
}

void *ns2__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns2__guid__ * SOAP_FMAC4 soap_in_ns2__guid__(struct soap *soap, const char *tag, ns2__guid__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns2__guid__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__guid__, sizeof(ns2__guid__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__guid__)
		return (ns2__guid__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns2__guid(soap, tag, &a->ns2__guid__::__item, "ns2:guid"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns2__guid__ * SOAP_FMAC2 soap_instantiate_ns2__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__guid__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__guid__ *p;
	size_t k = sizeof(ns2__guid__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__guid__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__guid__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__guid__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__guid__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__guid__(soap, tag ? tag : "ns2:guid", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns2__guid__ * SOAP_FMAC4 soap_get_ns2__guid__(struct soap *soap, ns2__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__guid(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__guid, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__guid, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns2__guid, SOAP_TYPE_ns2__guid, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns2__guid(soap, tag ? tag : "ns2:guid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns2__duration(soap, &this->ns2__duration__::__item);
}

void ns2__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns2__duration(soap, &this->ns2__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns2__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__duration__(struct soap *soap, const char *tag, int id, const ns2__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns2__duration(soap, tag, id, &a->ns2__duration__::__item, "ns2:duration");
}

void *ns2__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns2__duration__ * SOAP_FMAC4 soap_in_ns2__duration__(struct soap *soap, const char *tag, ns2__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns2__duration__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__duration__, sizeof(ns2__duration__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__duration__)
		return (ns2__duration__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns2__duration(soap, tag, &a->ns2__duration__::__item, "ns2:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns2__duration__ * SOAP_FMAC2 soap_instantiate_ns2__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__duration__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__duration__ *p;
	size_t k = sizeof(ns2__duration__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__duration__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__duration__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__duration__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__duration__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__duration__(soap, tag ? tag : "ns2:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns2__duration__ * SOAP_FMAC4 soap_get_ns2__duration__(struct soap *soap, ns2__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns2__duration, SOAP_TYPE_ns2__duration, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns2__duration(soap, tag ? tag : "ns2:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns2__char(soap, &this->ns2__char__::__item);
}

void ns2__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns2__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__char__(struct soap *soap, const char *tag, int id, const ns2__char__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns2__char(soap, tag, id, &a->ns2__char__::__item, "ns2:char");
}

void *ns2__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns2__char__ * SOAP_FMAC4 soap_in_ns2__char__(struct soap *soap, const char *tag, ns2__char__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns2__char__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__char__, sizeof(ns2__char__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__char__)
		return (ns2__char__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns2__char(soap, tag, &a->ns2__char__::__item, "ns2:char"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns2__char__ * SOAP_FMAC2 soap_instantiate_ns2__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__char__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__char__ *p;
	size_t k = sizeof(ns2__char__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__char__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__char__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__char__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__char__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__char__(soap, tag ? tag : "ns2:char", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns2__char__ * SOAP_FMAC4 soap_get_ns2__char__(struct soap *soap, ns2__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultCode = NULL;
	this->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultLabel = NULL;
	this->ns3__PostTapingCollectShuttleReportRunningModeRequest::EquipmentCode = NULL;
	this->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningMode = NULL;
	this->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningModeDateTime = NULL;
}

void ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultCode);
	soap_serialize_PointerTostd__string(soap, &this->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultLabel);
	soap_serialize_PointerToint(soap, &this->ns3__PostTapingCollectShuttleReportRunningModeRequest::EquipmentCode);
	soap_serialize_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, &this->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningMode);
	soap_serialize_PointerTodateTime(soap, &this->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningModeDateTime);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, const char *tag, int id, const ns3__PostTapingCollectShuttleReportRunningModeRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest), type ? type : "ns3:PostTapingCollectShuttleReportRunningModeRequest"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:DefaultCode", -1, &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultCode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:DefaultLabel", -1, &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultLabel, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:EquipmentCode", -1, &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::EquipmentCode, ""))
		return soap->error;
	if (soap_out_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, "ns3:RunningMode", -1, &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningMode, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "ns3:RunningModeDateTime", -1, &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningModeDateTime, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleReportRunningModeRequest * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleReportRunningModeRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__PostTapingCollectShuttleReportRunningModeRequest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, sizeof(ns3__PostTapingCollectShuttleReportRunningModeRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__PostTapingCollectShuttleReportRunningModeRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_DefaultCode1 = 1;
	size_t soap_flag_DefaultLabel1 = 1;
	size_t soap_flag_EquipmentCode1 = 1;
	size_t soap_flag_RunningMode1 = 1;
	size_t soap_flag_RunningModeDateTime1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DefaultCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ns3:DefaultCode", &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultCode, "xsd:int"))
				{	soap_flag_DefaultCode1--;
					continue;
				}
			}
			if (soap_flag_DefaultLabel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:DefaultLabel", &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::DefaultLabel, "xsd:string"))
				{	soap_flag_DefaultLabel1--;
					continue;
				}
			}
			if (soap_flag_EquipmentCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ns3:EquipmentCode", &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::EquipmentCode, "xsd:int"))
				{	soap_flag_EquipmentCode1--;
					continue;
				}
			}
			if (soap_flag_RunningMode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, "ns3:RunningMode", &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningMode, "ns3:PostTapingCollectShuttleRunningModeType"))
				{	soap_flag_RunningMode1--;
					continue;
				}
			}
			if (soap_flag_RunningModeDateTime1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "ns3:RunningModeDateTime", &a->ns3__PostTapingCollectShuttleReportRunningModeRequest::RunningModeDateTime, "xsd:dateTime"))
				{	soap_flag_RunningModeDateTime1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__PostTapingCollectShuttleReportRunningModeRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, sizeof(ns3__PostTapingCollectShuttleReportRunningModeRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__PostTapingCollectShuttleReportRunningModeRequest * SOAP_FMAC2 soap_instantiate_ns3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__PostTapingCollectShuttleReportRunningModeRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__PostTapingCollectShuttleReportRunningModeRequest *p;
	size_t k = sizeof(ns3__PostTapingCollectShuttleReportRunningModeRequest);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__PostTapingCollectShuttleReportRunningModeRequest);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__PostTapingCollectShuttleReportRunningModeRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__PostTapingCollectShuttleReportRunningModeRequest location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleReportRunningModeRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__PostTapingCollectShuttleReportRunningModeRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleReportRunningModeRequest * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, ns3__PostTapingCollectShuttleReportRunningModeRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__PostTapingCollectShuttleMissionStatusRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionNumber = NULL;
	this->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionStatus = NULL;
}

void ns3__PostTapingCollectShuttleMissionStatusRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionNumber);
	soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, &this->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionStatus);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__PostTapingCollectShuttleMissionStatusRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, const char *tag, int id, const ns3__PostTapingCollectShuttleMissionStatusRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest), type ? type : "ns3:PostTapingCollectShuttleMissionStatusRequest"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:MissionNumber", -1, &a->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionNumber, ""))
		return soap->error;
	if (soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, "ns3:MissionStatus", -1, &a->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionStatus, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__PostTapingCollectShuttleMissionStatusRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusRequest * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleMissionStatusRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__PostTapingCollectShuttleMissionStatusRequest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, sizeof(ns3__PostTapingCollectShuttleMissionStatusRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__PostTapingCollectShuttleMissionStatusRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_MissionNumber1 = 1;
	size_t soap_flag_MissionStatus1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MissionNumber1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ns3:MissionNumber", &a->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionNumber, "xsd:int"))
				{	soap_flag_MissionNumber1--;
					continue;
				}
			}
			if (soap_flag_MissionStatus1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, "ns3:MissionStatus", &a->ns3__PostTapingCollectShuttleMissionStatusRequest::MissionStatus, "ns3:PostTapingCollectShuttleMissionStatusType"))
				{	soap_flag_MissionStatus1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__PostTapingCollectShuttleMissionStatusRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, sizeof(ns3__PostTapingCollectShuttleMissionStatusRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__PostTapingCollectShuttleMissionStatusRequest * SOAP_FMAC2 soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__PostTapingCollectShuttleMissionStatusRequest *p;
	size_t k = sizeof(ns3__PostTapingCollectShuttleMissionStatusRequest);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__PostTapingCollectShuttleMissionStatusRequest);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__PostTapingCollectShuttleMissionStatusRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__PostTapingCollectShuttleMissionStatusRequest location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__PostTapingCollectShuttleMissionStatusRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleMissionStatusRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__PostTapingCollectShuttleMissionStatusRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusRequest * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, ns3__PostTapingCollectShuttleMissionStatusRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::TapingOutputConveyorNumber = NULL;
}

void ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::TapingOutputConveyorNumber);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, const char *tag, int id, const ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest), type ? type : "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:TapingOutputConveyorNumber", -1, &a->ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::TapingOutputConveyorNumber, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleTapingOutputConveyorRequest * SOAP_FMAC4 soap_in_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, sizeof(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_TapingOutputConveyorNumber1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TapingOutputConveyorNumber1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ns3:TapingOutputConveyorNumber", &a->ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::TapingOutputConveyorNumber, "xsd:int"))
				{	soap_flag_TapingOutputConveyorNumber1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, sizeof(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__PostTapingCollectShuttleTapingOutputConveyorRequest * SOAP_FMAC2 soap_instantiate_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *p;
	size_t k = sizeof(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__PostTapingCollectShuttleTapingOutputConveyorRequest location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__PostTapingCollectShuttleTapingOutputConveyorRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleTapingOutputConveyorRequest * SOAP_FMAC4 soap_get_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ReportRunningModeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__ReportRunningModeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ReportRunningModeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportRunningModeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportRunningModeResponse(struct soap *soap, const char *tag, int id, const _ns1__ReportRunningModeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportRunningModeResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportRunningModeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ReportRunningModeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportRunningModeResponse * SOAP_FMAC4 soap_in__ns1__ReportRunningModeResponse(struct soap *soap, const char *tag, _ns1__ReportRunningModeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportRunningModeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportRunningModeResponse, sizeof(_ns1__ReportRunningModeResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ReportRunningModeResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ReportRunningModeResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportRunningModeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportRunningModeResponse, SOAP_TYPE__ns1__ReportRunningModeResponse, sizeof(_ns1__ReportRunningModeResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ReportRunningModeResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportRunningModeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportRunningModeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ReportRunningModeResponse *p;
	size_t k = sizeof(_ns1__ReportRunningModeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ReportRunningModeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ReportRunningModeResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ReportRunningModeResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ReportRunningModeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ReportRunningModeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ReportRunningModeResponse(soap, tag ? tag : "ns1:ReportRunningModeResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportRunningModeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportRunningModeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportRunningModeResponse * SOAP_FMAC4 soap_get__ns1__ReportRunningModeResponse(struct soap *soap, _ns1__ReportRunningModeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportRunningModeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ReportRunningMode::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReportRunningMode::request = NULL;
}

void _ns1__ReportRunningMode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, &this->_ns1__ReportRunningMode::request);
#endif
}

int _ns1__ReportRunningMode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReportRunningMode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportRunningMode(struct soap *soap, const char *tag, int id, const _ns1__ReportRunningMode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReportRunningMode), type))
		return soap->error;
	if (soap_out_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, "ns1:request", -1, &a->_ns1__ReportRunningMode::request, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReportRunningMode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ReportRunningMode(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReportRunningMode * SOAP_FMAC4 soap_in__ns1__ReportRunningMode(struct soap *soap, const char *tag, _ns1__ReportRunningMode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReportRunningMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReportRunningMode, sizeof(_ns1__ReportRunningMode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ReportRunningMode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ReportRunningMode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_request1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_request1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, "ns1:request", &a->_ns1__ReportRunningMode::request, "ns3:PostTapingCollectShuttleReportRunningModeRequest"))
				{	soap_flag_request1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReportRunningMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReportRunningMode, SOAP_TYPE__ns1__ReportRunningMode, sizeof(_ns1__ReportRunningMode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ReportRunningMode * SOAP_FMAC2 soap_instantiate__ns1__ReportRunningMode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReportRunningMode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ReportRunningMode *p;
	size_t k = sizeof(_ns1__ReportRunningMode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ReportRunningMode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ReportRunningMode);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ReportRunningMode, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ReportRunningMode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ReportRunningMode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ReportRunningMode(soap, tag ? tag : "ns1:ReportRunningMode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReportRunningMode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReportRunningMode(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReportRunningMode * SOAP_FMAC4 soap_get__ns1__ReportRunningMode(struct soap *soap, _ns1__ReportRunningMode *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReportRunningMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MissionStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__MissionStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__MissionStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MissionStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MissionStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__MissionStatusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MissionStatusResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MissionStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MissionStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MissionStatusResponse * SOAP_FMAC4 soap_in__ns1__MissionStatusResponse(struct soap *soap, const char *tag, _ns1__MissionStatusResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MissionStatusResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MissionStatusResponse, sizeof(_ns1__MissionStatusResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MissionStatusResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MissionStatusResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MissionStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MissionStatusResponse, SOAP_TYPE__ns1__MissionStatusResponse, sizeof(_ns1__MissionStatusResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MissionStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__MissionStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MissionStatusResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MissionStatusResponse *p;
	size_t k = sizeof(_ns1__MissionStatusResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MissionStatusResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MissionStatusResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MissionStatusResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MissionStatusResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MissionStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MissionStatusResponse(soap, tag ? tag : "ns1:MissionStatusResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MissionStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MissionStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MissionStatusResponse * SOAP_FMAC4 soap_get__ns1__MissionStatusResponse(struct soap *soap, _ns1__MissionStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MissionStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MissionStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MissionStatus::request = NULL;
}

void _ns1__MissionStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, &this->_ns1__MissionStatus::request);
#endif
}

int _ns1__MissionStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MissionStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MissionStatus(struct soap *soap, const char *tag, int id, const _ns1__MissionStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MissionStatus), type))
		return soap->error;
	if (soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, "ns1:request", -1, &a->_ns1__MissionStatus::request, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MissionStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MissionStatus(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MissionStatus * SOAP_FMAC4 soap_in__ns1__MissionStatus(struct soap *soap, const char *tag, _ns1__MissionStatus *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MissionStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MissionStatus, sizeof(_ns1__MissionStatus), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MissionStatus)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MissionStatus *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_request1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_request1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, "ns1:request", &a->_ns1__MissionStatus::request, "ns3:PostTapingCollectShuttleMissionStatusRequest"))
				{	soap_flag_request1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MissionStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MissionStatus, SOAP_TYPE__ns1__MissionStatus, sizeof(_ns1__MissionStatus), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MissionStatus * SOAP_FMAC2 soap_instantiate__ns1__MissionStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MissionStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MissionStatus *p;
	size_t k = sizeof(_ns1__MissionStatus);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MissionStatus, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MissionStatus);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MissionStatus, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MissionStatus location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MissionStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MissionStatus(soap, tag ? tag : "ns1:MissionStatus", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MissionStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MissionStatus(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MissionStatus * SOAP_FMAC4 soap_get__ns1__MissionStatus(struct soap *soap, _ns1__MissionStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MissionStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__TapingOutputConveyorNumberResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__TapingOutputConveyorNumberResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__TapingOutputConveyorNumberResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__TapingOutputConveyorNumberResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TapingOutputConveyorNumberResponse(struct soap *soap, const char *tag, int id, const _ns1__TapingOutputConveyorNumberResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__TapingOutputConveyorNumberResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__TapingOutputConveyorNumberResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumberResponse * SOAP_FMAC4 soap_in__ns1__TapingOutputConveyorNumberResponse(struct soap *soap, const char *tag, _ns1__TapingOutputConveyorNumberResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__TapingOutputConveyorNumberResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse, sizeof(_ns1__TapingOutputConveyorNumberResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__TapingOutputConveyorNumberResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__TapingOutputConveyorNumberResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse, SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse, sizeof(_ns1__TapingOutputConveyorNumberResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__TapingOutputConveyorNumberResponse * SOAP_FMAC2 soap_instantiate__ns1__TapingOutputConveyorNumberResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__TapingOutputConveyorNumberResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__TapingOutputConveyorNumberResponse *p;
	size_t k = sizeof(_ns1__TapingOutputConveyorNumberResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__TapingOutputConveyorNumberResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__TapingOutputConveyorNumberResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__TapingOutputConveyorNumberResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__TapingOutputConveyorNumberResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__TapingOutputConveyorNumberResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__TapingOutputConveyorNumberResponse(soap, tag ? tag : "ns1:TapingOutputConveyorNumberResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__TapingOutputConveyorNumberResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__TapingOutputConveyorNumberResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumberResponse * SOAP_FMAC4 soap_get__ns1__TapingOutputConveyorNumberResponse(struct soap *soap, _ns1__TapingOutputConveyorNumberResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__TapingOutputConveyorNumberResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__TapingOutputConveyorNumber::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__TapingOutputConveyorNumber::request = NULL;
}

void _ns1__TapingOutputConveyorNumber::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, &this->_ns1__TapingOutputConveyorNumber::request);
#endif
}

int _ns1__TapingOutputConveyorNumber::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__TapingOutputConveyorNumber(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, int id, const _ns1__TapingOutputConveyorNumber *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__TapingOutputConveyorNumber), type))
		return soap->error;
	if (soap_out_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, "ns1:request", -1, &a->_ns1__TapingOutputConveyorNumber::request, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__TapingOutputConveyorNumber::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__TapingOutputConveyorNumber(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumber * SOAP_FMAC4 soap_in__ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, _ns1__TapingOutputConveyorNumber *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__TapingOutputConveyorNumber*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__TapingOutputConveyorNumber, sizeof(_ns1__TapingOutputConveyorNumber), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__TapingOutputConveyorNumber)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__TapingOutputConveyorNumber *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_request1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_request1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, "ns1:request", &a->_ns1__TapingOutputConveyorNumber::request, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest"))
				{	soap_flag_request1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__TapingOutputConveyorNumber *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__TapingOutputConveyorNumber, SOAP_TYPE__ns1__TapingOutputConveyorNumber, sizeof(_ns1__TapingOutputConveyorNumber), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__TapingOutputConveyorNumber * SOAP_FMAC2 soap_instantiate__ns1__TapingOutputConveyorNumber(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__TapingOutputConveyorNumber(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__TapingOutputConveyorNumber *p;
	size_t k = sizeof(_ns1__TapingOutputConveyorNumber);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__TapingOutputConveyorNumber, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__TapingOutputConveyorNumber);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__TapingOutputConveyorNumber, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__TapingOutputConveyorNumber location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__TapingOutputConveyorNumber::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__TapingOutputConveyorNumber(soap, tag ? tag : "ns1:TapingOutputConveyorNumber", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__TapingOutputConveyorNumber::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__TapingOutputConveyorNumber(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumber * SOAP_FMAC4 soap_get__ns1__TapingOutputConveyorNumber(struct soap *soap, _ns1__TapingOutputConveyorNumber *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__TapingOutputConveyorNumber(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedShort_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort_::__item);
}

void xsd__unsignedShort_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedShort_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort_(struct soap *soap, const char *tag, int id, const xsd__unsignedShort_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedShort(soap, tag, id, &a->xsd__unsignedShort_::__item, "xsd:unsignedShort");
}

void *xsd__unsignedShort_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedShort_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort_ * SOAP_FMAC4 soap_in_xsd__unsignedShort_(struct soap *soap, const char *tag, xsd__unsignedShort_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort_, sizeof(xsd__unsignedShort_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedShort_)
		return (xsd__unsignedShort_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedShort(soap, tag, &a->xsd__unsignedShort_::__item, "xsd:unsignedShort"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedShort_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedShort_ *p;
	size_t k = sizeof(xsd__unsignedShort_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__unsignedShort_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedShort_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedShort_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedShort_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedShort_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedShort_(soap, tag ? tag : "xsd:unsignedShort", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort_ * SOAP_FMAC4 soap_get_xsd__unsignedShort_(struct soap *soap, xsd__unsignedShort_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedLong_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ULONG64(soap, &this->xsd__unsignedLong_::__item);
}

void xsd__unsignedLong_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedLong_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong_(struct soap *soap, const char *tag, int id, const xsd__unsignedLong_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ULONG64(soap, tag, id, &a->xsd__unsignedLong_::__item, "xsd:unsignedLong");
}

void *xsd__unsignedLong_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedLong_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong_ * SOAP_FMAC4 soap_in_xsd__unsignedLong_(struct soap *soap, const char *tag, xsd__unsignedLong_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong_, sizeof(xsd__unsignedLong_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedLong_)
		return (xsd__unsignedLong_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ULONG64(soap, tag, &a->xsd__unsignedLong_::__item, "xsd:unsignedLong"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedLong_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedLong_ *p;
	size_t k = sizeof(xsd__unsignedLong_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__unsignedLong_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedLong_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedLong_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedLong_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedLong_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedLong_(soap, tag ? tag : "xsd:unsignedLong", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong_ * SOAP_FMAC4 soap_get_xsd__unsignedLong_(struct soap *soap, xsd__unsignedLong_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedInt_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt_::__item);
}

void xsd__unsignedInt_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedInt_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt_(struct soap *soap, const char *tag, int id, const xsd__unsignedInt_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedInt(soap, tag, id, &a->xsd__unsignedInt_::__item, "xsd:unsignedInt");
}

void *xsd__unsignedInt_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedInt_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt_ * SOAP_FMAC4 soap_in_xsd__unsignedInt_(struct soap *soap, const char *tag, xsd__unsignedInt_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt_, sizeof(xsd__unsignedInt_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedInt_)
		return (xsd__unsignedInt_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedInt(soap, tag, &a->xsd__unsignedInt_::__item, "xsd:unsignedInt"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedInt_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedInt_ *p;
	size_t k = sizeof(xsd__unsignedInt_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__unsignedInt_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedInt_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedInt_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedInt_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedInt_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedInt_(soap, tag ? tag : "xsd:unsignedInt", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt_ * SOAP_FMAC4 soap_get_xsd__unsignedInt_(struct soap *soap, xsd__unsignedInt_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedByte__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte__::__item);
}

void xsd__unsignedByte__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedByte__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte__(struct soap *soap, const char *tag, int id, const xsd__unsignedByte__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__unsignedByte(soap, tag, id, &a->xsd__unsignedByte__::__item, "xsd:unsignedByte");
}

void *xsd__unsignedByte__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedByte__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte__ * SOAP_FMAC4 soap_in_xsd__unsignedByte__(struct soap *soap, const char *tag, xsd__unsignedByte__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte__, sizeof(xsd__unsignedByte__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedByte__)
		return (xsd__unsignedByte__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__unsignedByte(soap, tag, &a->xsd__unsignedByte__::__item, "xsd:unsignedByte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedByte__ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedByte__ *p;
	size_t k = sizeof(xsd__unsignedByte__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__unsignedByte__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedByte__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedByte__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedByte__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedByte__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedByte__(soap, tag ? tag : "xsd:unsignedByte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte__ * SOAP_FMAC4 soap_get_xsd__unsignedByte__(struct soap *soap, xsd__unsignedByte__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__string_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->xsd__string_::__item);
}

void xsd__string_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__string_::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string_(struct soap *soap, const char *tag, int id, const xsd__string_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &a->xsd__string_::__item, "xsd:string");
}

void *xsd__string_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__string_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string_ * SOAP_FMAC4 soap_in_xsd__string_(struct soap *soap, const char *tag, xsd__string_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string_, sizeof(xsd__string_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__string_)
		return (xsd__string_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_std__string(soap, tag, &a->xsd__string_::__item, "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__string_ * SOAP_FMAC2 soap_instantiate_xsd__string_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__string_ *p;
	size_t k = sizeof(xsd__string_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__string_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__string_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__string_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__string_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__string_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__string_(soap, tag ? tag : "xsd:string", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string_ * SOAP_FMAC4 soap_get_xsd__string_(struct soap *soap, xsd__string_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__short_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_short(soap, &this->xsd__short_::__item);
}

void xsd__short_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__short_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short_(struct soap *soap, const char *tag, int id, const xsd__short_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_short(soap, tag, id, &a->xsd__short_::__item, "xsd:short");
}

void *xsd__short_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__short_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short_ * SOAP_FMAC4 soap_in_xsd__short_(struct soap *soap, const char *tag, xsd__short_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short_, sizeof(xsd__short_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__short_)
		return (xsd__short_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_short(soap, tag, &a->xsd__short_::__item, "xsd:short"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__short_ * SOAP_FMAC2 soap_instantiate_xsd__short_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__short_ *p;
	size_t k = sizeof(xsd__short_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__short_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__short_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__short_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__short_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__short_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__short_(soap, tag ? tag : "xsd:short", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short_ * SOAP_FMAC4 soap_get_xsd__short_(struct soap *soap, xsd__short_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__long_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_LONG64(soap, &this->xsd__long_::__item);
}

void xsd__long_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__long_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long_(struct soap *soap, const char *tag, int id, const xsd__long_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_LONG64(soap, tag, id, &a->xsd__long_::__item, "xsd:long");
}

void *xsd__long_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__long_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_in_xsd__long_(struct soap *soap, const char *tag, xsd__long_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long_, sizeof(xsd__long_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__long_)
		return (xsd__long_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_LONG64(soap, tag, &a->xsd__long_::__item, "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__long_ * SOAP_FMAC2 soap_instantiate_xsd__long_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__long_ *p;
	size_t k = sizeof(xsd__long_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__long_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__long_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__long_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__long_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__long_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__long_(soap, tag ? tag : "xsd:long", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_get_xsd__long_(struct soap *soap, xsd__long_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__int_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int_::__item);
}

void xsd__int_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__int_::__item, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int_(struct soap *soap, const char *tag, int id, const xsd__int_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &a->xsd__int_::__item, "xsd:int");
}

void *xsd__int_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__int_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int_ * SOAP_FMAC4 soap_in_xsd__int_(struct soap *soap, const char *tag, xsd__int_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int_, sizeof(xsd__int_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__int_)
		return (xsd__int_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_int(soap, tag, &a->xsd__int_::__item, "xsd:int"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__int_ * SOAP_FMAC2 soap_instantiate_xsd__int_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__int_ *p;
	size_t k = sizeof(xsd__int_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__int_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__int_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__int_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__int_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__int_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__int_(soap, tag ? tag : "xsd:int", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int_ * SOAP_FMAC4 soap_get_xsd__int_(struct soap *soap, xsd__int_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__float_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_float(soap, &this->xsd__float_::__item);
}

void xsd__float_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__float_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float_(struct soap *soap, const char *tag, int id, const xsd__float_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_float(soap, tag, id, &a->xsd__float_::__item, "xsd:float");
}

void *xsd__float_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__float_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float_ * SOAP_FMAC4 soap_in_xsd__float_(struct soap *soap, const char *tag, xsd__float_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float_, sizeof(xsd__float_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__float_)
		return (xsd__float_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_float(soap, tag, &a->xsd__float_::__item, "xsd:float"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__float_ * SOAP_FMAC2 soap_instantiate_xsd__float_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__float_ *p;
	size_t k = sizeof(xsd__float_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__float_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__float_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__float_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__float_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__float_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__float_(soap, tag ? tag : "xsd:float", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float_ * SOAP_FMAC4 soap_get_xsd__float_(struct soap *soap, xsd__float_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__duration(soap, &this->xsd__duration__::__item);
}

void xsd__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__duration(soap, &this->xsd__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration__(struct soap *soap, const char *tag, int id, const xsd__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__duration(soap, tag, id, &a->xsd__duration__::__item, "xsd:duration");
}

void *xsd__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__duration__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration__ * SOAP_FMAC4 soap_in_xsd__duration__(struct soap *soap, const char *tag, xsd__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration__, sizeof(xsd__duration__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__duration__)
		return (xsd__duration__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__duration(soap, tag, &a->xsd__duration__::__item, "xsd:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__duration__ * SOAP_FMAC2 soap_instantiate_xsd__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__duration__ *p;
	size_t k = sizeof(xsd__duration__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__duration__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__duration__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__duration__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__duration__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__duration__(soap, tag ? tag : "xsd:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration__ * SOAP_FMAC4 soap_get_xsd__duration__(struct soap *soap, xsd__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__duration, SOAP_TYPE_xsd__duration, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__duration(soap, tag ? tag : "xsd:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_double(soap, &this->xsd__double_::__item);
}

void xsd__double_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__double_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double_(struct soap *soap, const char *tag, int id, const xsd__double_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_double(soap, tag, id, &a->xsd__double_::__item, "xsd:double");
}

void *xsd__double_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__double_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double_ * SOAP_FMAC4 soap_in_xsd__double_(struct soap *soap, const char *tag, xsd__double_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double_, sizeof(xsd__double_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__double_)
		return (xsd__double_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_double(soap, tag, &a->xsd__double_::__item, "xsd:double"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__double_ * SOAP_FMAC2 soap_instantiate_xsd__double_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__double_ *p;
	size_t k = sizeof(xsd__double_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__double_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__double_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__double_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__double_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__double_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__double_(soap, tag ? tag : "xsd:double", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double_ * SOAP_FMAC4 soap_get_xsd__double_(struct soap *soap, xsd__double_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__decimal__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__decimal(soap, &this->xsd__decimal__::__item);
}

void xsd__decimal__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__decimal__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal__(struct soap *soap, const char *tag, int id, const xsd__decimal__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__decimal(soap, tag, id, &a->xsd__decimal__::__item, "xsd:decimal");
}

void *xsd__decimal__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__decimal__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal__ * SOAP_FMAC4 soap_in_xsd__decimal__(struct soap *soap, const char *tag, xsd__decimal__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal__, sizeof(xsd__decimal__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__decimal__)
		return (xsd__decimal__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__decimal(soap, tag, &a->xsd__decimal__::__item, "xsd:decimal"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__decimal__ * SOAP_FMAC2 soap_instantiate_xsd__decimal__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__decimal__ *p;
	size_t k = sizeof(xsd__decimal__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__decimal__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__decimal__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__decimal__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__decimal__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__decimal__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__decimal__(soap, tag ? tag : "xsd:decimal", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal__ * SOAP_FMAC4 soap_get_xsd__decimal__(struct soap *soap, xsd__decimal__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__decimal, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_dateTime(soap, &this->xsd__dateTime_::__item);
}

void xsd__dateTime_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__dateTime_::__item, SOAP_TYPE_dateTime);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime_(struct soap *soap, const char *tag, int id, const xsd__dateTime_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_dateTime(soap, tag, id, &a->xsd__dateTime_::__item, "xsd:dateTime");
}

void *xsd__dateTime_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__dateTime_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime_ * SOAP_FMAC4 soap_in_xsd__dateTime_(struct soap *soap, const char *tag, xsd__dateTime_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime_, sizeof(xsd__dateTime_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__dateTime_)
		return (xsd__dateTime_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_dateTime(soap, tag, &a->xsd__dateTime_::__item, "xsd:dateTime"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__dateTime_ * SOAP_FMAC2 soap_instantiate_xsd__dateTime_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__dateTime_ *p;
	size_t k = sizeof(xsd__dateTime_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__dateTime_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__dateTime_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__dateTime_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__dateTime_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__dateTime_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__dateTime_(soap, tag ? tag : "xsd:dateTime", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime_ * SOAP_FMAC4 soap_get_xsd__dateTime_(struct soap *soap, xsd__dateTime_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__byte__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__byte(soap, &this->xsd__byte__::__item);
}

void xsd__byte__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__byte__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte__(struct soap *soap, const char *tag, int id, const xsd__byte__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__byte(soap, tag, id, &a->xsd__byte__::__item, "xsd:byte");
}

void *xsd__byte__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__byte__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte__ * SOAP_FMAC4 soap_in_xsd__byte__(struct soap *soap, const char *tag, xsd__byte__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte__, sizeof(xsd__byte__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__byte__)
		return (xsd__byte__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__byte(soap, tag, &a->xsd__byte__::__item, "xsd:byte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__byte__ * SOAP_FMAC2 soap_instantiate_xsd__byte__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__byte__ *p;
	size_t k = sizeof(xsd__byte__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__byte__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__byte__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__byte__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__byte__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__byte__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__byte__(soap, tag ? tag : "xsd:byte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte__ * SOAP_FMAC4 soap_get_xsd__byte__(struct soap *soap, xsd__byte__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__boolean_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean_::__item);
}

void xsd__boolean_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean_(struct soap *soap, const char *tag, int id, const xsd__boolean_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &a->xsd__boolean_::__item, "xsd:boolean");
}

void *xsd__boolean_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__boolean_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean_ * SOAP_FMAC4 soap_in_xsd__boolean_(struct soap *soap, const char *tag, xsd__boolean_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean_, sizeof(xsd__boolean_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__boolean_)
		return (xsd__boolean_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_bool(soap, tag, &a->xsd__boolean_::__item, "xsd:boolean"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__boolean_ * SOAP_FMAC2 soap_instantiate_xsd__boolean_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__boolean_ *p;
	size_t k = sizeof(xsd__boolean_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__boolean_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__boolean_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__boolean_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__boolean_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__boolean_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__boolean_(soap, tag ? tag : "xsd:boolean", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean_ * SOAP_FMAC4 soap_get_xsd__boolean_(struct soap *soap, xsd__boolean_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__base64Binary__::__item.xsd__base64Binary::soap_default(soap);
}

void xsd__base64Binary__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__base64Binary__::__item.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__base64Binary__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary__(struct soap *soap, const char *tag, int id, const xsd__base64Binary__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return (a->xsd__base64Binary__::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary__ * SOAP_FMAC4 soap_in_xsd__base64Binary__(struct soap *soap, const char *tag, xsd__base64Binary__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary__, sizeof(xsd__base64Binary__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__base64Binary__)
		return (xsd__base64Binary__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!(a->xsd__base64Binary__::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__base64Binary__ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary__ *p;
	size_t k = sizeof(xsd__base64Binary__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary__(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary__ * SOAP_FMAC4 soap_get_xsd__base64Binary__(struct soap *soap, xsd__base64Binary__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyURI__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI__::__item);
}

void xsd__anyURI__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__anyURI__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI__(struct soap *soap, const char *tag, int id, const xsd__anyURI__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__anyURI(soap, tag, id, &a->xsd__anyURI__::__item, "xsd:anyURI");
}

void *xsd__anyURI__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__anyURI__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI__ * SOAP_FMAC4 soap_in_xsd__anyURI__(struct soap *soap, const char *tag, xsd__anyURI__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI__, sizeof(xsd__anyURI__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyURI__)
		return (xsd__anyURI__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__anyURI(soap, tag, &a->xsd__anyURI__::__item, "xsd:anyURI"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyURI__ * SOAP_FMAC2 soap_instantiate_xsd__anyURI__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__anyURI__ *p;
	size_t k = sizeof(xsd__anyURI__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__anyURI__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__anyURI__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__anyURI__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyURI__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__anyURI__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyURI__(soap, tag ? tag : "xsd:anyURI", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI__ * SOAP_FMAC4 soap_get_xsd__anyURI__(struct soap *soap, xsd__anyURI__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 4, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__anyURI, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__QName(soap, &this->xsd__QName__::__item);
}

void xsd__QName__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__QName(soap, &this->xsd__QName__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__QName__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName__(struct soap *soap, const char *tag, int id, const xsd__QName__ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__QName__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName__ * SOAP_FMAC4 soap_in_xsd__QName__(struct soap *soap, const char *tag, xsd__QName__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName__, sizeof(xsd__QName__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__QName__)
		return (xsd__QName__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__QName(soap, tag, &a->xsd__QName__::__item, "xsd:QName"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__QName__ * SOAP_FMAC2 soap_instantiate_xsd__QName__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__QName__ *p;
	size_t k = sizeof(xsd__QName__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__QName__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__QName__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__QName__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__QName__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__QName__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__QName__(soap, tag ? tag : "xsd:QName", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName__ * SOAP_FMAC4 soap_get_xsd__QName__(struct soap *soap, xsd__QName__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__IDREF__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF__::__item);
}

void xsd__IDREF__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__IDREF__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF__(struct soap *soap, const char *tag, int id, const xsd__IDREF__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__IDREF(soap, tag, id, &a->xsd__IDREF__::__item, "xsd:IDREF");
}

void *xsd__IDREF__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__IDREF__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF__ * SOAP_FMAC4 soap_in_xsd__IDREF__(struct soap *soap, const char *tag, xsd__IDREF__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF__, sizeof(xsd__IDREF__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__IDREF__)
		return (xsd__IDREF__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__IDREF(soap, tag, &a->xsd__IDREF__::__item, "xsd:IDREF"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__IDREF__ * SOAP_FMAC2 soap_instantiate_xsd__IDREF__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__IDREF__ *p;
	size_t k = sizeof(xsd__IDREF__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__IDREF__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__IDREF__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__IDREF__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__IDREF__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__IDREF__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__IDREF__(soap, tag ? tag : "xsd:IDREF", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF__ * SOAP_FMAC4 soap_get_xsd__IDREF__(struct soap *soap, xsd__IDREF__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[\\i-[:]][\\c-[:]]*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__IDREF, SOAP_TYPE_xsd__IDREF, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__IDREF(soap, tag ? tag : "xsd:IDREF", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__ID(soap, &this->xsd__ID__::__item);
}

void xsd__ID__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__ID(soap, &this->xsd__ID__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__ID__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID__(struct soap *soap, const char *tag, int id, const xsd__ID__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__ID(soap, tag, id, &a->xsd__ID__::__item, "xsd:ID");
}

void *xsd__ID__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__ID__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID__ * SOAP_FMAC4 soap_in_xsd__ID__(struct soap *soap, const char *tag, xsd__ID__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID__, sizeof(xsd__ID__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__ID__)
		return (xsd__ID__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__ID(soap, tag, &a->xsd__ID__::__item, "xsd:ID"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__ID__ * SOAP_FMAC2 soap_instantiate_xsd__ID__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__ID__ *p;
	size_t k = sizeof(xsd__ID__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__ID__, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__ID__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__ID__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__ID__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__ID__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__ID__(soap, tag ? tag : "xsd:ID", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID__ * SOAP_FMAC4 soap_get_xsd__ID__(struct soap *soap, xsd__ID__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[\\i-[:]][\\c-[:]]*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__ID, SOAP_TYPE_xsd__ID, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__ID(soap, tag ? tag : "xsd:ID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__QName, SOAP_TYPE_xsd__QName, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__QName(soap, tag ? tag : "xsd:QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyType)
		return (xsd__anyType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "xsd:ID"))
		return soap_instantiate_xsd__ID__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:IDREF"))
		return soap_instantiate_xsd__IDREF__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:QName"))
		return soap_instantiate_xsd__QName__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:anyURI"))
		return soap_instantiate_xsd__anyURI__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:base64Binary"))
		return soap_instantiate_xsd__base64Binary__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:boolean"))
		return soap_instantiate_xsd__boolean_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:byte"))
		return soap_instantiate_xsd__byte__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:dateTime"))
		return soap_instantiate_xsd__dateTime_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:decimal"))
		return soap_instantiate_xsd__decimal__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:double"))
		return soap_instantiate_xsd__double_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:duration"))
		return soap_instantiate_xsd__duration__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:float"))
		return soap_instantiate_xsd__float_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:int"))
		return soap_instantiate_xsd__int_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:long"))
		return soap_instantiate_xsd__long_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:short"))
		return soap_instantiate_xsd__short_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:string"))
		return soap_instantiate_xsd__string_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
		return soap_instantiate_xsd__unsignedByte__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
		return soap_instantiate_xsd__unsignedInt_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
		return soap_instantiate_xsd__unsignedLong_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
		return soap_instantiate_xsd__unsignedShort_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns2:char"))
		return soap_instantiate_ns2__char__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns2:duration"))
		return soap_instantiate_ns2__duration__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns2:guid"))
		return soap_instantiate_ns2__guid__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:PostTapingCollectShuttleMissionStatusType"))
		return soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusType_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:PostTapingCollectShuttleRunningModeType"))
		return soap_instantiate_ns3__PostTapingCollectShuttleRunningModeType_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest"))
		return soap_instantiate_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:PostTapingCollectShuttleMissionStatusRequest"))
		return soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:PostTapingCollectShuttleReportRunningModeRequest"))
		return soap_instantiate_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, n, NULL, NULL, size);
	xsd__anyType *p;
	size_t k = sizeof(xsd__anyType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__anyType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__anyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyType(soap, tag ? tag : "xsd:anyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportRunningMode(struct soap *soap, struct __ns1__ReportRunningMode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReportRunningMode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportRunningMode(struct soap *soap, const struct __ns1__ReportRunningMode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReportRunningMode(soap, &a->ns1__ReportRunningMode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportRunningMode(struct soap *soap, const char *tag, int id, const struct __ns1__ReportRunningMode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReportRunningMode(soap, "ns1:ReportRunningMode", -1, &a->ns1__ReportRunningMode, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRunningMode * SOAP_FMAC4 soap_in___ns1__ReportRunningMode(struct soap *soap, const char *tag, struct __ns1__ReportRunningMode *a, const char *type)
{
	size_t soap_flag_ns1__ReportRunningMode = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReportRunningMode*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReportRunningMode, sizeof(struct __ns1__ReportRunningMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReportRunningMode(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReportRunningMode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ReportRunningMode(soap, "ns1:ReportRunningMode", &a->ns1__ReportRunningMode, ""))
				{	soap_flag_ns1__ReportRunningMode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ReportRunningMode * SOAP_FMAC2 soap_instantiate___ns1__ReportRunningMode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReportRunningMode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ReportRunningMode *p;
	size_t k = sizeof(struct __ns1__ReportRunningMode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ReportRunningMode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ReportRunningMode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ReportRunningMode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ReportRunningMode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportRunningMode(struct soap *soap, const struct __ns1__ReportRunningMode *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ReportRunningMode(soap, tag ? tag : "-ns1:ReportRunningMode", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReportRunningMode * SOAP_FMAC4 soap_get___ns1__ReportRunningMode(struct soap *soap, struct __ns1__ReportRunningMode *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReportRunningMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MissionStatus(struct soap *soap, struct __ns1__MissionStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MissionStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MissionStatus(struct soap *soap, const struct __ns1__MissionStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MissionStatus(soap, &a->ns1__MissionStatus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MissionStatus(struct soap *soap, const char *tag, int id, const struct __ns1__MissionStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MissionStatus(soap, "ns1:MissionStatus", -1, &a->ns1__MissionStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MissionStatus * SOAP_FMAC4 soap_in___ns1__MissionStatus(struct soap *soap, const char *tag, struct __ns1__MissionStatus *a, const char *type)
{
	size_t soap_flag_ns1__MissionStatus = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MissionStatus*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MissionStatus, sizeof(struct __ns1__MissionStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MissionStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MissionStatus && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__MissionStatus(soap, "ns1:MissionStatus", &a->ns1__MissionStatus, ""))
				{	soap_flag_ns1__MissionStatus--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__MissionStatus * SOAP_FMAC2 soap_instantiate___ns1__MissionStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MissionStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__MissionStatus *p;
	size_t k = sizeof(struct __ns1__MissionStatus);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__MissionStatus, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__MissionStatus);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__MissionStatus, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__MissionStatus location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MissionStatus(struct soap *soap, const struct __ns1__MissionStatus *a, const char *tag, const char *type)
{
	if (soap_out___ns1__MissionStatus(soap, tag ? tag : "-ns1:MissionStatus", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MissionStatus * SOAP_FMAC4 soap_get___ns1__MissionStatus(struct soap *soap, struct __ns1__MissionStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MissionStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TapingOutputConveyorNumber(struct soap *soap, struct __ns1__TapingOutputConveyorNumber *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__TapingOutputConveyorNumber = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TapingOutputConveyorNumber(struct soap *soap, const struct __ns1__TapingOutputConveyorNumber *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__TapingOutputConveyorNumber(soap, &a->ns1__TapingOutputConveyorNumber);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, int id, const struct __ns1__TapingOutputConveyorNumber *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__TapingOutputConveyorNumber(soap, "ns1:TapingOutputConveyorNumber", -1, &a->ns1__TapingOutputConveyorNumber, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TapingOutputConveyorNumber * SOAP_FMAC4 soap_in___ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, struct __ns1__TapingOutputConveyorNumber *a, const char *type)
{
	size_t soap_flag_ns1__TapingOutputConveyorNumber = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__TapingOutputConveyorNumber*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__TapingOutputConveyorNumber, sizeof(struct __ns1__TapingOutputConveyorNumber), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__TapingOutputConveyorNumber(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__TapingOutputConveyorNumber && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__TapingOutputConveyorNumber(soap, "ns1:TapingOutputConveyorNumber", &a->ns1__TapingOutputConveyorNumber, ""))
				{	soap_flag_ns1__TapingOutputConveyorNumber--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__TapingOutputConveyorNumber * SOAP_FMAC2 soap_instantiate___ns1__TapingOutputConveyorNumber(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__TapingOutputConveyorNumber(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__TapingOutputConveyorNumber *p;
	size_t k = sizeof(struct __ns1__TapingOutputConveyorNumber);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__TapingOutputConveyorNumber, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__TapingOutputConveyorNumber);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__TapingOutputConveyorNumber, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__TapingOutputConveyorNumber location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TapingOutputConveyorNumber(struct soap *soap, const struct __ns1__TapingOutputConveyorNumber *a, const char *tag, const char *type)
{
	if (soap_out___ns1__TapingOutputConveyorNumber(soap, tag ? tag : "-ns1:TapingOutputConveyorNumber", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TapingOutputConveyorNumber * SOAP_FMAC4 soap_get___ns1__TapingOutputConveyorNumber(struct soap *soap, struct __ns1__TapingOutputConveyorNumber *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__TapingOutputConveyorNumber(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportRunningMode(struct soap *soap, _ns1__ReportRunningMode *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReportRunningMode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportRunningMode(struct soap *soap, const char *tag, int id, _ns1__ReportRunningMode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReportRunningMode, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ReportRunningMode ? type : NULL);
}

SOAP_FMAC3 _ns1__ReportRunningMode ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportRunningMode(struct soap *soap, const char *tag, _ns1__ReportRunningMode **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReportRunningMode **)soap_malloc(soap, sizeof(_ns1__ReportRunningMode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReportRunningMode *)soap_instantiate__ns1__ReportRunningMode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ReportRunningMode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReportRunningMode, sizeof(_ns1__ReportRunningMode), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportRunningMode(struct soap *soap, _ns1__ReportRunningMode *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ReportRunningMode(soap, tag ? tag : "ns1:ReportRunningMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReportRunningMode ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportRunningMode(struct soap *soap, _ns1__ReportRunningMode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReportRunningMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MissionStatus(struct soap *soap, _ns1__MissionStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MissionStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MissionStatus(struct soap *soap, const char *tag, int id, _ns1__MissionStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MissionStatus, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__MissionStatus ? type : NULL);
}

SOAP_FMAC3 _ns1__MissionStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__MissionStatus(struct soap *soap, const char *tag, _ns1__MissionStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MissionStatus **)soap_malloc(soap, sizeof(_ns1__MissionStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MissionStatus *)soap_instantiate__ns1__MissionStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__MissionStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MissionStatus, sizeof(_ns1__MissionStatus), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MissionStatus(struct soap *soap, _ns1__MissionStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__MissionStatus(soap, tag ? tag : "ns1:MissionStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MissionStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__MissionStatus(struct soap *soap, _ns1__MissionStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MissionStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TapingOutputConveyorNumber(struct soap *soap, _ns1__TapingOutputConveyorNumber *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__TapingOutputConveyorNumber))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, int id, _ns1__TapingOutputConveyorNumber *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__TapingOutputConveyorNumber, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__TapingOutputConveyorNumber ? type : NULL);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumber ** SOAP_FMAC4 soap_in_PointerTo_ns1__TapingOutputConveyorNumber(struct soap *soap, const char *tag, _ns1__TapingOutputConveyorNumber **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__TapingOutputConveyorNumber **)soap_malloc(soap, sizeof(_ns1__TapingOutputConveyorNumber *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__TapingOutputConveyorNumber *)soap_instantiate__ns1__TapingOutputConveyorNumber(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__TapingOutputConveyorNumber **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__TapingOutputConveyorNumber, sizeof(_ns1__TapingOutputConveyorNumber), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TapingOutputConveyorNumber(struct soap *soap, _ns1__TapingOutputConveyorNumber *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__TapingOutputConveyorNumber(soap, tag ? tag : "ns1:TapingOutputConveyorNumber", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__TapingOutputConveyorNumber ** SOAP_FMAC4 soap_get_PointerTo_ns1__TapingOutputConveyorNumber(struct soap *soap, _ns1__TapingOutputConveyorNumber **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__TapingOutputConveyorNumber(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PostTapingCollectShuttleRunningModeType(struct soap *soap, enum ns3__PostTapingCollectShuttleRunningModeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const char *tag, int id, enum ns3__PostTapingCollectShuttleRunningModeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleRunningModeType ** SOAP_FMAC4 soap_in_PointerTons3__PostTapingCollectShuttleRunningModeType(struct soap *soap, const char *tag, enum ns3__PostTapingCollectShuttleRunningModeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns3__PostTapingCollectShuttleRunningModeType **)soap_malloc(soap, sizeof(enum ns3__PostTapingCollectShuttleRunningModeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns3__PostTapingCollectShuttleRunningModeType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns3__PostTapingCollectShuttleRunningModeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__PostTapingCollectShuttleRunningModeType, sizeof(enum ns3__PostTapingCollectShuttleRunningModeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PostTapingCollectShuttleRunningModeType(struct soap *soap, enum ns3__PostTapingCollectShuttleRunningModeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, tag ? tag : "ns3:PostTapingCollectShuttleRunningModeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleRunningModeType ** SOAP_FMAC4 soap_get_PointerTons3__PostTapingCollectShuttleRunningModeType(struct soap *soap, enum ns3__PostTapingCollectShuttleRunningModeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__PostTapingCollectShuttleRunningModeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, enum ns3__PostTapingCollectShuttleMissionStatusType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const char *tag, int id, enum ns3__PostTapingCollectShuttleMissionStatusType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleMissionStatusType ** SOAP_FMAC4 soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, const char *tag, enum ns3__PostTapingCollectShuttleMissionStatusType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns3__PostTapingCollectShuttleMissionStatusType **)soap_malloc(soap, sizeof(enum ns3__PostTapingCollectShuttleMissionStatusType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns3__PostTapingCollectShuttleMissionStatusType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns3__PostTapingCollectShuttleMissionStatusType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusType, sizeof(enum ns3__PostTapingCollectShuttleMissionStatusType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, enum ns3__PostTapingCollectShuttleMissionStatusType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, tag ? tag : "ns3:PostTapingCollectShuttleMissionStatusType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__PostTapingCollectShuttleMissionStatusType ** SOAP_FMAC4 soap_get_PointerTons3__PostTapingCollectShuttleMissionStatusType(struct soap *soap, enum ns3__PostTapingCollectShuttleMissionStatusType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, ns3__PostTapingCollectShuttleReportRunningModeRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, const char *tag, int id, ns3__PostTapingCollectShuttleReportRunningModeRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest ? type : NULL);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleReportRunningModeRequest ** SOAP_FMAC4 soap_in_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleReportRunningModeRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__PostTapingCollectShuttleReportRunningModeRequest **)soap_malloc(soap, sizeof(ns3__PostTapingCollectShuttleReportRunningModeRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__PostTapingCollectShuttleReportRunningModeRequest *)soap_instantiate_ns3__PostTapingCollectShuttleReportRunningModeRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__PostTapingCollectShuttleReportRunningModeRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__PostTapingCollectShuttleReportRunningModeRequest, sizeof(ns3__PostTapingCollectShuttleReportRunningModeRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, ns3__PostTapingCollectShuttleReportRunningModeRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleReportRunningModeRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleReportRunningModeRequest ** SOAP_FMAC4 soap_get_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(struct soap *soap, ns3__PostTapingCollectShuttleReportRunningModeRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__PostTapingCollectShuttleReportRunningModeRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, ns3__PostTapingCollectShuttleMissionStatusRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, const char *tag, int id, ns3__PostTapingCollectShuttleMissionStatusRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest ? type : NULL);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusRequest ** SOAP_FMAC4 soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleMissionStatusRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__PostTapingCollectShuttleMissionStatusRequest **)soap_malloc(soap, sizeof(ns3__PostTapingCollectShuttleMissionStatusRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__PostTapingCollectShuttleMissionStatusRequest *)soap_instantiate_ns3__PostTapingCollectShuttleMissionStatusRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__PostTapingCollectShuttleMissionStatusRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__PostTapingCollectShuttleMissionStatusRequest, sizeof(ns3__PostTapingCollectShuttleMissionStatusRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, ns3__PostTapingCollectShuttleMissionStatusRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleMissionStatusRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleMissionStatusRequest ** SOAP_FMAC4 soap_get_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(struct soap *soap, ns3__PostTapingCollectShuttleMissionStatusRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__PostTapingCollectShuttleMissionStatusRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, const char *tag, int id, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest ? type : NULL);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleTapingOutputConveyorRequest ** SOAP_FMAC4 soap_in_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, const char *tag, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest **)soap_malloc(soap, sizeof(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *)soap_instantiate_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__PostTapingCollectShuttleTapingOutputConveyorRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__PostTapingCollectShuttleTapingOutputConveyorRequest, sizeof(ns3__PostTapingCollectShuttleTapingOutputConveyorRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag ? tag : "ns3:PostTapingCollectShuttleTapingOutputConveyorRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__PostTapingCollectShuttleTapingOutputConveyorRequest ** SOAP_FMAC4 soap_get_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(struct soap *soap, ns3__PostTapingCollectShuttleTapingOutputConveyorRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__PostTapingCollectShuttleTapingOutputConveyorRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
