/* soapBasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy.cpp
   Generated by gSOAP 2.8.100 for client_collect.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapBasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy.h"

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy()
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(const BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(imode, omode);
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::~BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns2", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL },
        { "ns3", "http://schemas.datacontract.org/2004/07/Mx.Broker.Std.Request.Interface.PostTapingCollectShuttle01", NULL, NULL },
        { "ns1", "http://tempuri.org/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::copy()
{	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy *dup = SOAP_NEW_UNMANAGED(BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy& BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::operator=(const BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_fault()
{	return this->soap->fault;
}

const char *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::send_TapingOutputConveyorNumber(const char *soap_endpoint_url, const char *soap_action, _ns1__TapingOutputConveyorNumber *ns1__TapingOutputConveyorNumber)
{
	struct __ns1__TapingOutputConveyorNumber soap_tmp___ns1__TapingOutputConveyorNumber;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wstest.groupeliebot.fr/Mx/Lima1/Mx.Broker.Lima.Endpoint/Interface/InterfacesPostTapingCollectShuttleToMx0101.svc";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IInterfacesPostTapingCollectShuttleToMx01/TapingOutputConveyorNumber";
	soap_tmp___ns1__TapingOutputConveyorNumber.ns1__TapingOutputConveyorNumber = ns1__TapingOutputConveyorNumber;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__TapingOutputConveyorNumber(soap, &soap_tmp___ns1__TapingOutputConveyorNumber);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TapingOutputConveyorNumber(soap, &soap_tmp___ns1__TapingOutputConveyorNumber, "-ns1:TapingOutputConveyorNumber", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TapingOutputConveyorNumber(soap, &soap_tmp___ns1__TapingOutputConveyorNumber, "-ns1:TapingOutputConveyorNumber", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::recv_TapingOutputConveyorNumber(_ns1__TapingOutputConveyorNumberResponse &ns1__TapingOutputConveyorNumberResponse)
{
	ns1__TapingOutputConveyorNumberResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TapingOutputConveyorNumberResponse.soap_get(soap, "ns1:TapingOutputConveyorNumberResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::send_MissionStatus(const char *soap_endpoint_url, const char *soap_action, _ns1__MissionStatus *ns1__MissionStatus)
{
	struct __ns1__MissionStatus soap_tmp___ns1__MissionStatus;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wstest.groupeliebot.fr/Mx/Lima1/Mx.Broker.Lima.Endpoint/Interface/InterfacesPostTapingCollectShuttleToMx0101.svc";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IInterfacesPostTapingCollectShuttleToMx01/MissionStatus";
	soap_tmp___ns1__MissionStatus.ns1__MissionStatus = ns1__MissionStatus;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__MissionStatus(soap, &soap_tmp___ns1__MissionStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MissionStatus(soap, &soap_tmp___ns1__MissionStatus, "-ns1:MissionStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MissionStatus(soap, &soap_tmp___ns1__MissionStatus, "-ns1:MissionStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::recv_MissionStatus(_ns1__MissionStatusResponse &ns1__MissionStatusResponse)
{
	ns1__MissionStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MissionStatusResponse.soap_get(soap, "ns1:MissionStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::send_ReportRunningMode(const char *soap_endpoint_url, const char *soap_action, _ns1__ReportRunningMode *ns1__ReportRunningMode)
{
	struct __ns1__ReportRunningMode soap_tmp___ns1__ReportRunningMode;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://wstest.groupeliebot.fr/Mx/Lima1/Mx.Broker.Lima.Endpoint/Interface/InterfacesPostTapingCollectShuttleToMx0101.svc";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IInterfacesPostTapingCollectShuttleToMx01/ReportRunningMode";
	soap_tmp___ns1__ReportRunningMode.ns1__ReportRunningMode = ns1__ReportRunningMode;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__ReportRunningMode(soap, &soap_tmp___ns1__ReportRunningMode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReportRunningMode(soap, &soap_tmp___ns1__ReportRunningMode, "-ns1:ReportRunningMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReportRunningMode(soap, &soap_tmp___ns1__ReportRunningMode, "-ns1:ReportRunningMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIInterfacesPostTapingCollectShuttleToMx01Proxy::recv_ReportRunningMode(_ns1__ReportRunningModeResponse &ns1__ReportRunningModeResponse)
{
	ns1__ReportRunningModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReportRunningModeResponse.soap_get(soap, "ns1:ReportRunningModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
